EEEEEEEEEEEEEEEEEEEEEEEEEE                                               [100%]
==================================== ERRORS ====================================
________ ERROR at setup of TestCompanyManager.test_get_company_success _________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_get_company_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_______ ERROR at setup of TestCompanyManager.test_update_company_success _______

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_update_company_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_ ERROR at setup of TestCompanyManager.test_update_company_duplicate_reg_no_fails _

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_update_company_duplicate_reg_no_fails>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
______ ERROR at setup of TestCustomerManager.test_create_customer_success ______

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_customer_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_ ERROR at setup of TestCustomerManager.test_create_customer_duplicate_code_fails _

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_customer_duplicate_code_fails>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
____ ERROR at setup of TestCustomerManager.test_add_loyalty_points_for_sale ____

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_add_loyalty_points_for_sale>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_________ ERROR at setup of TestCustomerManager.test_search_customers __________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_search_customers>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_______ ERROR at setup of TestInventoryManager.test_adjust_stock_success _______

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_adjust_stock_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
__ ERROR at setup of TestInventoryManager.test_create_purchase_order_success ___

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_purchase_order_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_ ERROR at setup of TestInventoryManager.test_receive_purchase_order_items_success _

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_receive_purchase_order_items_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_ ERROR at setup of TestInventoryManager.test_receive_more_than_ordered_fails __

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_receive_more_than_ordered_fails>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_______ ERROR at setup of TestProductManager.test_create_product_success _______

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_product_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_ ERROR at setup of TestProductManager.test_create_product_duplicate_sku_fails _

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_product_duplicate_sku_fails>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_______ ERROR at setup of TestProductManager.test_update_product_success _______

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_update_product_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_____ ERROR at setup of TestProductManager.test_deactivate_product_success _____

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_deactivate_product_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
__________ ERROR at setup of TestProductManager.test_search_products ___________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_search_products>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
________ ERROR at setup of TestSalesManager.test_finalize_sale_success _________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_finalize_sale_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
__ ERROR at setup of TestSalesManager.test_finalize_sale_insufficient_payment __

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_finalize_sale_insufficient_payment>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
___ ERROR at setup of TestSalesManager.test_finalize_sale_insufficient_stock ___

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_finalize_sale_insufficient_stock>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
____ ERROR at setup of TestUserManager.test_create_user_success_with_roles _____

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_user_success_with_roles>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_ ERROR at setup of TestUserManager.test_create_user_duplicate_username_fails __

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_create_user_duplicate_username_fails>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
___________ ERROR at setup of TestUserManager.test_update_user_roles ___________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_update_user_roles>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
________ ERROR at setup of TestUserManager.test_deactivate_user_success ________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_deactivate_user_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
_________ ERROR at setup of TestProductService.test_get_by_sku_success _________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_get_by_sku_success>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
________ ERROR at setup of TestProductService.test_get_by_sku_not_found ________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_get_by_sku_not_found>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
__________ ERROR at setup of TestProductService.test_search_products ___________

self = JSONB(astext_type=Text())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
                   ^^^^^^^^^^^^^^^
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'. Did you mean: 'visit_JSON'?

lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6747: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py:1666: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:977: in process
    return type_._compiler_dispatch(self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0>
element = JSONB(astext_type=Text())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_JSONB'")
kw = {'type_expression': Column('old_values', JSONB(astext_type=Text()), table=<audit_logs>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB (Background on this error at: https://sqlalche.me/e/20/l7de)

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:982: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

item = <Coroutine test_search_products>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield
                 ^^^^^

lib/python3.12/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/python3.12/site-packages/pytest_asyncio/plugin.py:347: in _asyncgen_fixture_wrapper
    result = event_loop.run_until_complete(setup())
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
          ^^^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:40: in db_engine
    await conn.run_sync(Base.metadata.create_all)
lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py:887: in run_sync
    return await greenlet_spawn(
lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
             ^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/schema.py:5924: in create_all
    bind._run_ddl_visitor(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:2455: in _run_ddl_visitor
    ).traverse_single(element)
      ^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:982: in visit_metadata
    self.traverse_single(
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
           ^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:1020: in visit_table
    )._invoke_with(self.connection)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:321: in _invoke_with
    return bind.execute(self)
           ^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:187: in _execute_on_connection
    return connection._execute_ddl(
lib/python3.12/site-packages/sqlalchemy/engine/base.py:1523: in _execute_ddl
    compiled = ddl.compile(
lib/python3.12/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/ddl.py:76: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.12/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
           ^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7a335ca17830>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7a335cf5ac90>, kw = {}
table = Table('audit_logs', MetaData(), Column('id', BigInteger(), table=<audit_logs>, primary_key=True, nullable=False), Colu...audit_logs>, nullable=False, default=CallableColumnDefault(<function datetime.utcnow at 0x7a335d0e5ee0>)), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x7a335cc9ae10>
text = '\nCREATE TABLE audit_logs (\n\tid BIGINT NOT NULL, \n\tcompany_id UUID, \n\tuser_id UUID, \n\taction VARCHAR(50) NOT NULL, \n\ttable_name VARCHAR(100) NOT NULL, \n\trecord_id UUID NOT NULL'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x7a335ca98440>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'audit_logs', column 'old_values'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x7a335ca162d0> can't render element of type JSONB

lib/python3.12/site-packages/sqlalchemy/sql/compiler.py:6726: CompileError
=============================== warnings summary ===============================
tests/unit/business_logic/managers/test_company_manager.py::TestCompanyManager::test_get_company_success
  /cdrom/project/SG-Point-Of-Sale/lib/python3.12/site-packages/pytest_asyncio/plugin.py:761: DeprecationWarning: The event_loop fixture provided by pytest-asyncio has been redefined in
  /cdrom/project/SG-Point-Of-Sale/tests/conftest.py:23
  Replacing the event_loop fixture with a custom implementation is deprecated
  and will lead to errors in the future.
  If you want to request an asyncio event loop with a scope other than function
  scope, use the "scope" argument to the asyncio mark when marking the tests.
  If you want to return different types of event loops, use the event_loop_policy
  fixture.
  
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform linux, python 3.12.3-final-0 -----------
Name                                               Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------
app/__init__.py                                        0      0   100%
app/business_logic/__init__.py                         0      0   100%
app/business_logic/dto/__init__.py                     0      0   100%
app/business_logic/dto/company_dto.py                 21      0   100%
app/business_logic/dto/customer_dto.py                26      0   100%
app/business_logic/dto/inventory_dto.py               95      0   100%
app/business_logic/dto/payment_dto.py                 22     22     0%   3-35
app/business_logic/dto/product_dto.py                 30      3    90%   28-30
app/business_logic/dto/reporting_dto.py               63     63     0%   8-93
app/business_logic/dto/sales_dto.py                   46      0   100%
app/business_logic/dto/user_dto.py                    22      0   100%
app/business_logic/managers/__init__.py                0      0   100%
app/business_logic/managers/base_manager.py            7      7     0%   3-15
app/business_logic/managers/company_manager.py        46     46     0%   3-67
app/business_logic/managers/customer_manager.py      105    105     0%   3-159
app/business_logic/managers/gst_manager.py            39     39     0%   3-83
app/business_logic/managers/inventory_manager.py     132    132     0%   3-211
app/business_logic/managers/payment_manager.py        61     61     0%   3-90
app/business_logic/managers/product_manager.py        74     74     0%   8-165
app/business_logic/managers/reporting_manager.py     136    136     0%   3-220
app/business_logic/managers/sales_manager.py          98     98     0%   5-199
app/business_logic/managers/user_manager.py           79     79     0%   3-128
app/core/__init__.py                                   0      0   100%
app/core/application_core.py                         235    164    30%   19-37, 47-52, 59-69, 76-99, 103-109, 113-115, 119-128, 132-133, 137-138, 142-143, 147-148, 153-156, 160-163, 167-170, 174-177, 181-184, 188-191, 195-198, 202-205, 209-212, 216-219, 223-226, 230-233, 238-241, 245-248, 252-255, 259-262, 266-269, 273-276, 280-283, 287-290, 294-297
app/core/async_bridge.py                              78     57    27%   28-30, 34-48, 52-61, 65-69, 72-83, 88-91, 94-100, 103-107, 110-114
app/core/config.py                                    13      0   100%
app/core/exceptions.py                                 8      0   100%
app/core/result.py                                    13      0   100%
app/integrations/__init__.py                           0      0   100%
app/main.py                                           34     34     0%   8-64
app/models/__init__.py                                10      0   100%
app/models/accounting.py                              47      0   100%
app/models/audit_log.py                               21      0   100%
app/models/base.py                                    14      0   100%
app/models/company.py                                 46      0   100%
app/models/customer.py                                21      0   100%
app/models/inventory.py                               67      0   100%
app/models/product.py                                 72      0   100%
app/models/sales.py                                   65      0   100%
app/models/user.py                                    61      1    98%   37
app/services/__init__.py                               0      0   100%
app/services/base_service.py                          85     85     0%   8-152
app/services/company_service.py                       40     40     0%   3-55
app/services/customer_service.py                      62     62     0%   3-106
app/services/inventory_service.py                     62     62     0%   3-115
app/services/payment_service.py                       34     34     0%   3-58
app/services/product_service.py                       53     53     0%   3-92
app/services/purchase_order_service.py                48     48     0%   3-97
app/services/report_service.py                        70     70     0%   9-193
app/services/sales_service.py                         26     26     0%   3-52
app/services/supplier_service.py                      41     41     0%   3-73
app/services/user_service.py                          34     34     0%   3-44
app/ui/__init__.py                                     0      0   100%
app/ui/dialogs/__init__.py                             0      0   100%
app/ui/dialogs/customer_dialog.py                     97     97     0%   3-143
app/ui/dialogs/payment_dialog.py                     131    131     0%   3-176
app/ui/dialogs/payment_method_dialog.py               74     74     0%   3-116
app/ui/dialogs/product_dialog.py                      89     89     0%   3-122
app/ui/dialogs/purchase_order_dialog.py              148    148     0%   3-183
app/ui/dialogs/receive_po_dialog.py                  104    104     0%   3-150
app/ui/dialogs/stock_adjustment_dialog.py            141    141     0%   13-180
app/ui/dialogs/user_dialog.py                        118    118     0%   3-165
app/ui/main_window.py                                 57     57     0%   10-113
app/ui/resources/__init__.py                           0      0   100%
app/ui/resources/icons/__init__.py                     0      0   100%
app/ui/views/__init__.py                               0      0   100%
app/ui/views/customer_view.py                        149    149     0%   3-211
app/ui/views/dashboard_view.py                        64     64     0%   3-94
app/ui/views/inventory_view.py                       245    245     0%   3-293
app/ui/views/payment_method_view.py                  127    127     0%   3-170
app/ui/views/pos_view.py                             185    185     0%   3-224
app/ui/views/product_view.py                         146    146     0%   3-190
app/ui/views/reports_view.py                         183    183     0%   3-237
app/ui/views/settings_view.py                        174    174     0%   3-220
app/ui/widgets/__init__.py                             0      0   100%
app/ui/widgets/kpi_widget.py                          26     26     0%   5-43
app/ui/widgets/managed_table_view.py                  40     40     0%   6-80
app/ui/widgets/searchable_table_view.py                1      1     0%   10
--------------------------------------------------------------------------------
TOTAL                                               4761   3975    17%

=========================== short test summary info ============================
ERROR tests/unit/business_logic/managers/test_company_manager.py::TestCompanyManager::test_get_company_success
ERROR tests/unit/business_logic/managers/test_company_manager.py::TestCompanyManager::test_update_company_success
ERROR tests/unit/business_logic/managers/test_company_manager.py::TestCompanyManager::test_update_company_duplicate_reg_no_fails
ERROR tests/unit/business_logic/managers/test_customer_manager.py::TestCustomerManager::test_create_customer_success
ERROR tests/unit/business_logic/managers/test_customer_manager.py::TestCustomerManager::test_create_customer_duplicate_code_fails
ERROR tests/unit/business_logic/managers/test_customer_manager.py::TestCustomerManager::test_add_loyalty_points_for_sale
ERROR tests/unit/business_logic/managers/test_customer_manager.py::TestCustomerManager::test_search_customers
ERROR tests/unit/business_logic/managers/test_inventory_manager.py::TestInventoryManager::test_adjust_stock_success
ERROR tests/unit/business_logic/managers/test_inventory_manager.py::TestInventoryManager::test_create_purchase_order_success
ERROR tests/unit/business_logic/managers/test_inventory_manager.py::TestInventoryManager::test_receive_purchase_order_items_success
ERROR tests/unit/business_logic/managers/test_inventory_manager.py::TestInventoryManager::test_receive_more_than_ordered_fails
ERROR tests/unit/business_logic/managers/test_product_manager.py::TestProductManager::test_create_product_success
ERROR tests/unit/business_logic/managers/test_product_manager.py::TestProductManager::test_create_product_duplicate_sku_fails
ERROR tests/unit/business_logic/managers/test_product_manager.py::TestProductManager::test_update_product_success
ERROR tests/unit/business_logic/managers/test_product_manager.py::TestProductManager::test_deactivate_product_success
ERROR tests/unit/business_logic/managers/test_product_manager.py::TestProductManager::test_search_products
ERROR tests/unit/business_logic/managers/test_sales_manager.py::TestSalesManager::test_finalize_sale_success
ERROR tests/unit/business_logic/managers/test_sales_manager.py::TestSalesManager::test_finalize_sale_insufficient_payment
ERROR tests/unit/business_logic/managers/test_sales_manager.py::TestSalesManager::test_finalize_sale_insufficient_stock
ERROR tests/unit/business_logic/managers/test_user_manager.py::TestUserManager::test_create_user_success_with_roles
ERROR tests/unit/business_logic/managers/test_user_manager.py::TestUserManager::test_create_user_duplicate_username_fails
ERROR tests/unit/business_logic/managers/test_user_manager.py::TestUserManager::test_update_user_roles
ERROR tests/unit/business_logic/managers/test_user_manager.py::TestUserManager::test_deactivate_user_success
ERROR tests/unit/services/test_product_service.py::TestProductService::test_get_by_sku_success
ERROR tests/unit/services/test_product_service.py::TestProductService::test_get_by_sku_not_found
ERROR tests/unit/services/test_product_service.py::TestProductService::test_search_products
1 warning, 26 errors in 52.72s
